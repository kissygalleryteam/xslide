#!/usr/bin/env node

var optimist = require('optimist')
    .usage('Convert juicer templates.\nUsage: $0 template...', {
        'f': {
            'type': 'string',
            'description': 'Output File',
            'alias': 'output'
        },
        'v': {
            'type': 'boolean',
            'description': 'Convert juicer template to velocity.',
            'alias': 'velocity'
        }
    })

    .check(function(argv) {
        var template = [0];

        if(!argv._.length) {
            throw 'Must define at least one template or directory.';
        }

        argv._.forEach(function(template) {
            try {
                fs.statSync(template);
            } catch (err) {
                throw 'Unable to open template file "' + template + '"';
            }
        });
    });

var fs = require('fs'),
    juicer = require('../src/juicer'),
    basename = require('path').basename;

var argv = optimist.argv,
    template = argv._[0];

var output = [];

function processTemplate(template) {
    var path = template,
        stat = fs.statSync(path);

    if (stat.isDirectory()) {
        fs.readdirSync(template).map(function(file) {
            var path = template + '/' + file;

            if (/\.juicer$/.test(path) || fs.statSync(path).isDirectory()) {
                processTemplate(path, root || template);
            }
        });

    } else {
        var data = fs.readFileSync(path, 'utf8');
        output.push(data + '\n');
    }
}

argv._.forEach(function(template) {
    processTemplate(template);
});

// Output the content

output = output.join('');

if(argv.velocity) {

    output = output
        // for expression
        .replace(juicer.settings.forstart, function($, _name, alias, key) {
            var alias = alias || 'value', key = key && key.substr(1);
            return '#foreach ($' + alias + ' in $' + _name + ')';
        })
        .replace(juicer.settings.forend, '#end')

        // if expression
        .replace(juicer.settings.ifstart, function($, condition) {
            return '#if (' + condition + ')';
        })
        .replace(juicer.settings.ifend, '#end')

        // else expression
        .replace(juicer.settings.elsestart, function($) {
            return '#else';
        })

        // else if expression
        .replace(juicer.settings.elseifstart, function($, condition) {
            return '#elseif (' + condition + ')';
        })

        // interpolate without escape
        .replace(juicer.settings.noneencode, function($, _name) {
            return '$' + _name;
        })

        // interpolate with escape
        .replace(juicer.settings.interpolate, function($, _name) {
            return '$' + _name;
        })

        // clean up comments
        .replace(juicer.settings.inlinecomment, function($) {
            return '## ' + $.substr(2, $.length - 3);
        })

        // range expression
        .replace(juicer.settings.rangestart, function($, _name, start, end) {
            return '#foreach ($' + _name + ' in [' + start + '...' + end + ']' + ')';
        })

        // include sub-template
        .replace(juicer.settings.include, function($, tpl, data) {
            return '#include ("' + tpl + '")';
        });

}

if(argv.output) {
    fs.writeFileSync(argv.output, output, 'utf8');
} else {
    console.log(output);
}
