{
  "name": "grunt-kmc",
  "description": "Grunt plugin for KISSY Module Compiler",
  "version": "0.1.18",
  "homepage": "https://github.com/daxingplay/grunt-kmc",
  "author": {
    "name": "daxingplay",
    "email": "daxingplay@gmail.com",
    "url": "techcheng.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/daxingplay/grunt-kmc.git"
  },
  "bugs": {
    "url": "https://github.com/daxingplay/grunt-kmc/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/daxingplay/grunt-kmc/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "kmc": "~1.0.31"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-kmc\r\n\r\n[![Build Status](https://travis-ci.org/daxingplay/grunt-kmc.png?branch=master)](https://travis-ci.org/daxingplay/grunt-kmc)\r\n\r\n[![NPM version](https://badge.fury.io/js/grunt-kmc.png)](http://badge.fury.io/js/grunt-kmc)\r\n\r\n> [KISSY Module Compiler](https://github.com/daxingplay/kmc)的Grunt插件版本。\r\n\r\n## 项目说明\r\n\r\n依赖`Grunt ~0.4.1`，请首先安装Grunt，参照[Grunt安装手册](http://gruntjs.com/getting-started)和[Gruntfile样例](http://gruntjs.com/sample-gruntfile)。之后，敲入命令来安装`grunt-kmc`:\r\n\r\n```shell\r\nnpm install grunt-kmc --save-dev\r\n```\r\n\r\n然后，确保你的`gruntfile.js`中载入了这个模块\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-kmc');\r\n```\r\n\r\n## 视频演示\r\n\r\n- 生成依赖关系表：<http://asciinema.org/a/6731>\r\n- 仅作静态合并：<http://asciinema.org/a/6732>\r\n\r\n构建规则说明：基于 [KISSY](http://docs.kissyui.com/) 的项目代码只要符合 [KMD](http://docs.kissyui.com/1.4/docs/html/guideline/kmd.html) 规范，在源码发布上线之前，要做至少两件事\r\n\r\n1. 线上模块代码必须带有模块名配置\r\n1. 静态合并或者生成依赖关系的Map\r\n\r\n## Gruntfile.js 里的 KMC 任务\r\n\r\n### 介绍\r\n\r\n在Gruntfile.js文件中，添加名为`kmc`的任务，代码块写在`grunt.initConfig()`函数参数对象中\r\n\r\n```js\r\ngrunt.initConfig({\r\n\tkmc: {\r\n\t\toptions: {\r\n\t\t\tdepFilePath: 'build/mods.js',\r\n\t\t\tcomboOnly: true,\r\n\t\t\tfixModuleName:true,\r\n\t\t\tcomboMap: true,\r\n\t\t\tpackages: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'package-name',\r\n\t\t\t\t\tpath: './src/',\r\n\t\t\t\t\tcharset:'utf-8',\r\n\t\t\t\t\tignorePackageNameInUri:true\r\n\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t},\r\n\t\tmain: {\r\n\t\t\tfiles: [\r\n\t\t\t\t{\r\n\t\t\t\t\texpand: true,\r\n\t\t\t\t\tcwd: 'src/',\r\n\t\t\t\t\tsrc: [ '**/*' ],\r\n\t\t\t\t\tdest: 'build/'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t},\r\n})\r\n```\r\n\r\n### 配置项\r\n\r\n#### options.packages\r\n\r\n- 类型: `Array`\r\n- 默认值: `[]`\r\n\r\nKISSY 包配置项，可以使用KISSY 1.2的数组方式，也可以使用KISSY 1.3+的对象方式。配置项的含义和KISSY的包配置规则完全一致，具体可参考[KISSY loader的文档](http://docs.kissyui.com/1.4/docs/html/api/loader/config.html)。比如：\r\n\r\n\tpackages: [\r\n\t\t{\r\n\t\t\tname: 'package-name',\r\n\t\t\tpath: './src/',\r\n\t\t\tcharset:'utf-8',\r\n\t\t\tignorePackageNameInUri:true\r\n\t\t}\r\n\t]\r\n\r\n或者（推荐）\r\n\r\n\tpackages: {\r\n\t\t'package-name': {\r\n\t\t\tbase: './src/',\r\n\t\t\tcharset:'utf-8',\r\n\t\t\tignorePackageNameInUri:true\r\n\t\t}\r\n\t}\r\n\r\n#### options.charset\r\n\r\n- 类型: `String`\r\n- 默认值: `utf-8`\r\n\r\n输入文件的编码\r\n\r\n#### options.comboOnly\r\n\r\n- 类型: `Boolean`\r\n- 默认值: `false`\r\n\r\n设置为`true`时，将不进行文件静态合并，比如两个文件`a.js`和`b.js`：\r\n\r\na.js\r\n\r\n\t// a.js\r\n\tKISSY.add(function(S){\r\n\t\t// a\r\n\t},{\r\n\t\trequires:['./b']\r\n\t});\r\n\r\nb.js\r\n\r\n\t// b.js\r\n\tKISSY.add(function(S){\r\n\t\t// b\r\n\t});\r\n\r\n在`comboOnly`为`false`时将静态合并，比如`a.js`将生成为：\r\n\r\na.js\r\n\r\n\t// b.js\r\n\tKISSY.add('pkg/b',function(S){\r\n\t\t// b\r\n\t});\r\n\t// a.js\r\n\tKISSY.add('pkg/a',function(S){\r\n\t\t// a\r\n\t},{\r\n\t\trequires:['./b']\r\n\t});\r\n\r\n即所有的依赖也都合并到一个文件中。\r\n\r\n#### options.depFilePath\r\n\r\n- 类型: `String`\r\n- 默认值: ``\r\n\r\n生成依赖关系表的文件（输出）位置\r\n\r\n#### options.depFileCharset\r\n\r\n- 类型: `String`\r\n- 默认值: 和`options.charset`保持一样\r\n\r\n依赖关系表文件的编码类型\r\n\r\n#### options.traverse\r\n\r\n- 类型：`Boolean`\r\n- 默认值：`false`\r\n\r\n当指定模个文件为入口文件时，遍历子目录进行构建\r\n\r\n#### options.fixModuleName\r\n\r\n- 类型:`Boolean`\r\n- 默认值:`false`\r\n\r\n置为`true`时，会给所有文件补全模块名，建议当`comboOnly`为`true`时，总是设置此项为`true`\r\n重要：fixModuleName会在指定的src上进行补全模块名，所以如果您需要使用combo模式并且需要补全模块名，请先用grunt-contrib-copy将您的src文件拷贝到dest，然后再对dest执行kmc任务。\r\n\r\n#### options.comboMap\r\n\r\n- 类型：`Boolean`\r\n- 默认值：`false`\r\n\r\n当指定一批文件为源文件时，对这些文件只生成模块依赖关系表，存放于`options.depFilePath`中\r\n\r\n### options.copyAssets\r\n\r\n- 类型：`Boolean`\r\n- 默认值：`false`\r\n\r\n需要和fixModuleName搭配使用。\r\n选项为true的时候，kmc会把src的文件拷贝到dest后再添加模块名。为false的时候，会直接在用户配置的src中的文件添加模块名。我们建议您如果有fixModuleName的需求的时候，先使用grunt-contrib-copy任务把src拷贝到dest，再执行grunt-kmc任务\r\n\r\n----------------------------------\r\n\r\n## 用法\r\n\r\n#### Example1\r\n\r\n如果静态合并：其中`mods`中的文件被`index.js`和`list.js`所依赖，[Example](https://github.com/daxingplay/grunt-kmc/tree/master/example/combo-one-file)\r\n\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Before</th>\r\n            <th>After</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>\r\n<pre>\r\n./src\r\n├── mods\r\n│   ├── a.js\r\n│   ├── b.js\r\n│   ├── c.js\r\n│   └── d.js\r\n└── pages\r\n    └── home\r\n        ├── index.js\r\n        └── list.js\r\n</pre>\r\n            </td>\r\n            <td>\r\n<pre>\r\nsample/build\r\n└── pages\r\n    └── home\r\n        ├── index.js\r\n        └── list.js\r\n</pre>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n\r\n#### Example2\r\n\r\n生成Map：[Example](https://github.com/daxingplay/grunt-kmc/tree/master/example/generate-map-file)\r\n\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Before</th>\r\n            <th>After</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>\r\n<pre>\r\n./src\r\n├── mods\r\n│   ├── a.js\r\n│   ├── b.js\r\n│   ├── c.js\r\n│   └── d.js\r\n└── pages\r\n    └── home\r\n        ├── index.js\r\n        └── list.js\r\n</pre>\r\n            </td>\r\n            <td>\r\n<pre>\r\n./build\r\n├── mods\r\n│   ├── a.js\r\n│   ├── b.js\r\n│   ├── c.js\r\n│   └── d.js\r\n├── map.js\r\n└── pages\r\n    └── home\r\n        ├── index.js\r\n        └── list.js\r\n</pre>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n#### Example3\r\n\r\n仅补全模块名：[Example](https://github.com/daxingplay/grunt-kmc/tree/master/example/fix-module-only)\r\n\r\n-------------------------------------------\r\n\r\n### 更多配置写法参考\r\n\r\n#### 示例1，单文件静态合并\r\n\r\n入口为单个文件，将这个文件的依赖关系解析好后合并入另一个文件\r\n\r\n\tgrunt.initConfig({\r\n\t\tkmc: {\r\n\t\t\tmain:{\r\n\t\t\t\toptions: {\r\n\t\t\t\t\tpackages: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'test',\r\n\t\t\t\t\t\t\tpath: 'assets/src',\r\n\t\t\t\t\t\t\tcharset: 'utf-8',\r\n\t\t\t\t\t\t\tignorePackageNameInUri:true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\tfiles: [{\r\n\t\t\t\t\t// 入口和出口均为单文件\r\n\t\t\t\t\tsrc: 'assets/src/test/index.js',\r\n\t\t\t\t\tdest: 'assets/dist/test/index.combo.js'\r\n\t\t\t\t}]\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n详细配置项请参照[kmc首页](https://github.com/daxingplay/kmc)。\r\n\r\n如果输出`gbk`编码的文件，需要配置全局项\r\n\r\n\tkmc: {\r\n\t\toptions: {\r\n\t\t\tcharset:'gbk',\r\n\t\t\tpackages: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'pkg-name',\r\n\t\t\t\t\tpath: '../',\r\n\t\t\t\t\tcharset:'gbk',\r\n\t\t\t\t\tignorePackageNameInUri:true\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t//...\r\n\tgrunt.file.defaultEncoding = 'gbk';\r\n\r\n#### 示例2，批量静态合并文件\r\n\r\n入口为一批文件，每个文件都解析合并\r\n\r\n\tgrunt.initConfig({\r\n        kmc: {\r\n            options: {\r\n                packages: [\r\n                    {\r\n                        name: 'pkg-name',\r\n                        path: '../',\r\n\t\t\t\t\t\tcharset:'utf-8',\r\n\t\t\t\t\t\tignorePackageNameInUri:true\r\n\r\n                    }\r\n                ],\r\n\t\t\t\t// 将 ModuleName 中的 `src` 去掉\r\n\t\t\t\tmap: [['pkg-name/src/', 'pkg-name/']]\r\n            },\r\n\r\n            main: {\r\n                files: [\r\n                    {\r\n\t\t\t\t\t\t// 这里指定项目根目录下所有文件为入口文件\r\n                        expand: true,\r\n\t\t\t\t\t\tcwd: 'src/',\r\n                        src: [ '**/*.js', '!Gruntfile.js'],\r\n                        dest: 'build/'\r\n                    }\r\n                ]\r\n            }\r\n\t\t}\r\n\t});\r\n\r\n\r\n#### 示例3，批量静态合并，包名为变量\r\n\r\n入口为一批文件，每个文件都解析合并，包名从配置文件中读取\r\n\r\n\tgrunt.initConfig({\r\n\t\t// 读取`abc.json配置文件中的配置`\r\n        pkg: grunt.file.readJSON('abc.json'),\r\n        kmc: {\r\n            options: {\r\n                packages: [\r\n                    {\r\n                        name: '<%= pkg.name %>',\r\n                        path: '../',\r\n\t\t\t\t\t\tcharset:'utf-8',\r\n\t\t\t\t\t\tignorePackageNameInUri:true\r\n                    }\r\n                ],\r\n\t\t\t\t// 将 ModuleName 中的 `src` 去掉\r\n\t\t\t\tmap: [['<%= pkg.name %>/src/', '<%= pkg.name %>/']]\r\n            },\r\n\r\n            main: {\r\n                files: [\r\n                    {\r\n\t\t\t\t\t\t// 这里指定项目根目录下所有文件为入口文件\r\n                        expand: true,\r\n\t\t\t\t\t\tcwd: 'src/',\r\n                        src: [ '**/*.js', '!Gruntfile.js'],\r\n                        dest: 'build/'\r\n                    }\r\n                ]\r\n            }\r\n\t\t}\r\n\t});\r\n\r\n其中 abc.json 文件内容如下：\r\n\r\n\t{\r\n\t\t\"name\": \"my-custom-package-name\",\r\n\t}\r\n\r\n#### 示例4，针对一批文件生成依赖关系表\r\n\r\n生成模块依赖关系表，同时源文件也被添加好模块名存放到目标目录\r\n\r\n\tgrunt.initConfig({\r\n\t\toptions: {\r\n\t\t\tpackages: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'h5-test',\r\n\t\t\t\t\tpath: './src/', //指定package起始路径\r\n\t\t\t\t\tcharset:'utf-8',\r\n\t\t\t\t\tignorePackageNameInUri:true\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t// 生成模块依赖关系表\r\n\t\t\tdepFilePath:'build/mods.js',\r\n\t\t\tcomboOnly:true,// 不要静态合并\r\n\t\t\tfixModuleName:true,// 补全模块名称\r\n\t\t\tcomboMap:true\r\n\t\t},\r\n\t\tmain: {\r\n\t\t\tfiles: [\r\n\t\t\t\t{\r\n\t\t\t\t\tsrc: 'src/**/*.js',\r\n\t\t\t\t\tdest: 'build/'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t});\r\n\r\n### 更多应用案例\r\n\r\n[Clam](http://github.com/jayli/generator-clam)工具和[ABC](http://abc.f2e.taobao.net/)依赖kmc。\r\n\r\n---------------------------------------\r\n\r\n## Q & A\r\n\r\n#### 生成的Map文件依赖地址怎么有绝对地址？\r\n\r\n比如\r\n\r\n\t/*generated by KMC*/\r\n\tKISSY.config('modules', {\r\n\t 'xcake/app/cjs-full': { requires: ['node', '/home/bachi/xx/node-kpc/sample/src/components/header/index.js']},\r\n\t 'xcake/app/cjs': { requires: ['node', '/home/bachi/xx/node-kpc/sample/src/components/header/index.js']},\r\n\t 'xcake/app/fac-config': { requires: ['node']},\r\n\t 'xcake/app/namedMod2': { requires: ['node', '/home/bachi/xx/node-kpc/sample/src/app/mod.js']} \r\n\t});\r\n\r\n原因是`header/index.js`文件不存在。\r\n\r\n-------------------------------------------\r\n## Changelog\r\n\r\n* 0.1.15 bugfix for comboOnly & comboMap\r\n* 0.1.7 bugfix for comboMap\r\n* 0.1.6 add traverse option.\r\n* 0.1.5 fix charset output bug.\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-kmc@0.1.18",
  "_from": "grunt-kmc@~0.1.1"
}
